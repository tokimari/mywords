1|initialize|"初期化する《変数を初期値にセットする》"|"<p>コードの中では、あるイベントが起きたときに、<br>変数やメソッドをどうするかという設定を書く箇所になりました。</p><p>backbone.jsの中では</p><pre>initialize: function(){<br>  this.model.on(%27invalid%27, this.isEmpty, this);<br>}</pre><p>という風に、「invalid」だと判定されたとき、「this.isEmpty」という処理を実行する。<br>といったコードを書きました。</p><p>invalidは「（変数などが）正しい形式でない」ときに使われるので、<br>入力のエラーチェックなどに用いるようです。</p>"|Notation|イニシャライズ
2|bundle|"束ねる, 包みにする; 《製品を》 バンドルする, 同梱する."|"<p>開発では、bundleというパッケージ管理ツールとして使います。</p><p>プロジェクトに使う開発環境の依存関係を解消するために用いるツールだそうです。<br>（今のところ $ bundle install xxxでしか見ていませんが…）</p><p>たくさんツールを使うようになると、まとめて管理するのに必要になるようです。</p>"|Notation|バンドル
3|migrate|"移動する; 《データを》 退避させる"|"<p>今日環境構築の際に、エンジニアさんに「～を一個一個流してmigrationかけてね」<br>と言われたのですが、どうもデータが被ってコンフリクト（衝突）<br>しているから退避させて被らせないようにしてね！ということかなと思います。</p>"|Notation|マイグレート
4|alias|"《ファイル名・コマンド・アドレスなどにユーザーがつける》 別名"|"<p>bash上で、「vi」と打ったときにも「vim」を起動するためにaliasで別名を割り振って設定しています。</p><p>他にも、「alias mocha=%27mocha --reporter spec%27」と.bashrcに記述しておくと<br>mochaでテストツールを使うときに、「mocha --reporter spec」ではなく<br>「mocha」と打つだけでテストが終わったものにチェックマークで分かりやすく表示してくれるようになります。</p>"|Notation|エイリアス
5|component|"成分; 構成部分, 部品."|"<p>何らかの特定の機能を持った、プログラムやハードウェアの部品。</p><p>単体では試用できず、他のプログラムと組み合わせて機能を実現・追加するために用いる。</p><p>今日のソースコードリーディングのときに、佐藤歩さんのコードの中で出てきました。</p><p>ユーザをフォローしているとき、フォロー追加ボタンの見た目を「フォロー中です」と切り替える、<br>といった、viewとmodelの仲介のような役割をしていました。</p><p>APIに通信するため、通信が失敗したときに見た目とデータの不一致を防ぐための処理も書いていたり、<br>読んで行くと工夫がたくさん見られて面白かったです！</p>"|Notation|コンポーネント
6|dispatcher|"発送係; 急送[信]者."|"<p>CPU(中央処理装置)がタスクを実行するときの実行順序をスケジュールするルーチンを指す.</p><p>OS(オペレーティングシステム)の機能単位の一つ.</p><p>コード中には、getDispatcherというメソッドとして、<br>ページの名前と遷移先のパスを引数に、ページの切り替えを行っていました。</p><p>実際に遷移を実行するメソッドと、振り分けを行うメソッドを分けることで、保守しやすくしているようです。</p>"|Notation|ディスパッチャー
7|argument|"引数(ひきすう), アーギュメント《関数やサブルーチンに与えるパラメーター》."|"<p>javascriptでは、関数の内部でのみ利用可能な配列「arguments」として使われています。</p><p>関数に渡された引数値を管理していて、たとえば</p><pre>function display(msg) {<br>  alert(msg);<br>}</pre><p>で渡す引数msgとは別に、argumentsが実は存在しています。</p><p>関数が呼び出されたタイミングでargumentsオブジェクトに変数が引き渡されており、<br>いくつ引数が設定されているか分からない状況でもargument.lengthで個数を取得できてしまうそうです。</p><p>個数は固定だと思っていたのでびっくりです！</p>"|Notation|アーギュメント
8|assign|"割り当てる."|"<p>あるプログラムの実行に際して,それに必要とされるバッファ,<br>補助記憶装置,入出力装置などのシステム資源をそのプログラムに割り当てること.</p><p>vimでファイルを書いていると、時々保存しそびれて閉じてしまい<br>「バッファが存在します」と言われることがあります。</p><p>編集中のファイルを一時的に保存しておくための記憶領域のことだそうです。</p><p>計算のために容量を割り当てておくことは、<br>限られたリソースで開発をするときに必要だなと感じました。</p>"|Notation|アサイン
9|dependency|"従属; 依存; 従属性"|"<p>今日はpackage.jsonを使ってパッケージのインストールをしました。</p><p>package.jsonの「dependencies」という項目で、<br>プロジェクトに必要なパッケージ（プログラム）を書いておくと<br>コマンド一つで必要なパッケージをインストールし、開発者同士で環境を揃えることができます。</p><p>プロジェクトは細かいバージョンに依存することもあるので、<br>パッケージを追加した際やバージョンを変えた際には<br>きちんと修正する必要がありますが、とても便利なツールです。</p>"|Notation|ディペンデンシー
10|iteration|"繰返し; 反復"|"<p>プログラムの場合に,ある条件が満足されるまで,<br>いくつかの命令または命令文を繰り返し実行すること.</p><p>このように「繰り返される」一連の命令や命令文のことをループと呼ぶ.</p><p>プログラミングではないですが、パシャペでは、仕事の区切りとして<br>「イテレーション」という２週間の期間を設けて、プロジェクトの計画をたてています。</p><p>（ぷらりでは１週間単位で「スプリント」と呼んでいたので、まちまちなようです。。）</p>"|Notation|イテレーション
11|instance|" 実例, 事例.《オブジェクト指向言語で, ある型をもつ具体的なオブジェクト》."|"<p>振返りのときに、佐竹さんから「インスタンスは『もの感』のあるものだよ」と教えていただきました。</p><p>Javaなどのオブジェクト指向言語では、クラスという、部品の設計書のようなものがあり<br>設計書から部品をたくさん複製したり、一部を書き換えて似た物の複製を作ることができます。</p><p>javascriptにはクラスという概念はありませんが、prototype継承をクラスのように扱うことで<br>Javaのように「インスタンス（のようなもの）」を生成することができるそうです。</p><p>インスタンスやコンストラクタなど、名前が中々結びつかなくて苦労しました。。</p><pre>  var bar = new Foo();</pre><p>としたとき、Fooという設計図から作られたbarがインスタンスです。</p><p>カタカナの名前は中々ややこしいです…。</p>"|Notation|インスタンス
12|chunk|" かたまり 送受信されるデータの一塊の意味で、 chunked data, chunked encoding などの形で用いられる。"|"<p>一つのチャンクは、データ本体の先頭にそのデータについての情報<br>(データ長やデータの種類、識別子など)を付加した形になっており、<br>これをいくつも連ねてデータ全体を表現する。</p><p>webブラウザで入力された文字をサーバに送信するとき、<br>サーバ側では、データの受け渡しに使う文字列として「chunk」を受信していき、<br>それを全て足し合わせて、実際に私たちが読める形式に変換して初めてデータを読むことができるようになりました。</p><p>chunkを試しに表示してみると、とても読めないもので、<br>改めて、裏側でデータとしてやり取りされるものは数値なんだなぁと実感しました。</p>"|Notation|チャンク
13|socket|"ソケット、受け口、コンセント(プラグの受け側)"|"<p>一般には電源を接続するための器具であるが,<br>通信においてはTCP/IPでエンドポイントを与えるシステムコール.</p><p>web socket通信で出てきました。データのやりとりをする際、<br>socket.emit(%27任意の名前%27, データ);　で送り、<br>socket.on(%27任意の名前%27, データ);　で受け取ります。</p><p>emitは発射・放出、onは何かイベントが起きたときに使うので<br>データのやり取りの受け皿という意味で使われていると思います。</p>"|Notation|ソケット
14|href|" HTMLにおけるアンカータグの属性の一つ。 　hypertext referenceを省略したもの。"|"<p>少しいつもと違いますが…、研修中に「読み方が分からない！」と話題になりました。</p><p>頻出の用語ですが、皆それぞれ適当な読み方をしていたようです。</p><p>私はずっとハーフとかハルフとか呼んでいました…</p><p>aタグで、ページ間を結びつける役割という意味でreference、のようです。</p><p>余談ですが、ターミナルで「say hello」と言うと単語を音読してくれます。</p><p>同じ単語を並べても、イントネーションが少しずつ変わるので面白いです。</p>"|Notation|エイチレフ
15|notification|"通知すること; 通知書."|"<p>社内ではノティと呼ばれていて、最初なんのことかと思っていましたが、<br>アプリの通知機能・通知ボタンのことでした。</p><p>ノティはある程度場所だったり機能が定型化されていますが、<br>サービスによっては役割も意味合いも全然違うようで面白いです。</p><p>ノティを見れば、そのサービスがユーザに何を伝えたいのか分かるかも…？<br>と思いながら最近見るようになりました。</p>"|Notation|ノティフィケーション
16|validate|" 検査する(妥当性を); 確認する正当であることや, 妥当であることを確認したり,検査することをいう."|"<p>開発では、文章の入力チェックのことをバリデートするとか言っているようです。</p><p>最初は空文字チェックしか浮かばなかったのですが、phpやscriptタグをフォームから送信されると、スクリプトが実行されてページがエラーになってしまいます。</p><p>そこでscriptタグが実行されないように、正しくエスケープ処理をしてあげる必要があるそうです。</p><p>技術研修のときには<code><? php echo(%27hoge%27); ?></code>という一番簡単なコードで落ちてしまいました。。</p><p>ある程度定型化して使い回せるようにしておきたいです！</p>"|Notation|バリデート
17|region|" 地域; リージョン. コンピューターが何らかの処理をする際、 その処理の及ぶ範囲として選択される区画のこと. "|"<p>フロンテックのコードの中で出てきました。</p><p>jsの中で、全体を包むlayoutに各region（ヘッダーとかフッターとか）を<br>乗せていくイメージだそうです。</p><p>DOM操作をするためのgetElementByIdと同じ役割なのかなと思ったのですが、少し違うそうです。うまく説明できないので、コードを書きながら理解したいと思います…！</p>"|Notation|リージョン
18|proxy|" 代理(人); (proxy server). 《ウェブサーバーへのデータ要求を》プロキシサーバーに送る."|"<blockquote>企業などの内部ネットワークとインターネットの境にあって、直接インターネットに接続できない内部ネットワークのコンピュータに代わって、「代理」としてインターネットとの接続を行うコンピュータのこと。また、そのための機能を実現するソフトウェア。</blockquote><p>指定したURLにアクセスしたとき、別のファイルやページを参照するように設定できます。<br>（yahooへのアクセスなのにgoogleを表示するなど）<br>パシャペで使っているCharlesもプロキシサーバの一つです。</p><p>チェック用URL（ステージング環境）にアクセスしたとき、表示するファイルだけを自分のローカルマシンの作業ファイルに置き換えて表示することができるそうです。<br>わざわざアップしなくても、本番環境とほぼ同じ環境で動作確認ができます。</p><p>vagrant立ち上げてgrunt走らせてproxy通して…と混乱してしまいました。。</p>"|Notation|プロキシ
19|activate|"活性化する. 《ウインドーなどを》 アクティブにする."|"<p>メールアドレスを使ってアカウントを登録した際に、<br>メールを見てアカウントをactivationにして！と英語で表示されていて、<br>確認メール上のURLを開いて、アカウントをactiveにするんだよー<br>と、言われて始めて気づきました。。</p><p>もっと英文読む努力します。</p>"|Notation|アクティベート
20|injection|"注入"|"<p>開発用語としては、SQLインジェクションとして出てきました！</p><p>フォームから入力するときに特殊なタグを挿入されると、mysqlなどのデータベースをが破壊されてしまったり、情報を入手されてしまうことがあります。<br>そのため、開発側はそういった不正なタグが実行されないように、正しくエスケープ処理を行わなければいけません。</p><p>node.js研修で作った掲示板では、エスケープはしていたのですが、投稿タイトルをURLの一部にしていたので、入力内容によってはエラーが起きてしまいました。<br>（＝トレーナーさんに秒殺されました）</p><p>悪意をもった人の行動で、全ユーザに被害を出しかねないので、フロントエンジニアとしては正しいエスケープを知っておかなければです。</p>"|Notation|インジェクション
21|stash|"〈ものを〉こっそりしまう，隠す; 蓄える 〈away〉"|"<p>gitで、自分の作業中のファイルにリモートの変更を取り込みたいときに使いました。</p><p>作業途中の修正箇所と、リモート上の修正箇所が重なっていたりするときなど、<br>一旦自分の作業ファイルを別の場所に避難させておいて、リモートのファイルを<br>pullして、衝突を解消してから取り込むのだそうです。</p><p>[memo]</p><pre>$ git fetch origin     // 更新情報を取得<br>$ git pull hoge          // コンフリクトしたら↓<br>$ git stash          // 作業ファイルを一時退避<br>$ git pop          // auto mergeできたら取り込んでくれる<br>               // だめだったら自力でなんとかする</pre>"|Notation|スタッシュ
22|fetch|"取ってくる, 連れてくる, 《データを》取得する"|"<p>gitで、リモートの更新情報などを取得するときに使います。</p><p>今まで<code>$ git fetch origin</code>で全部取得していましたが、今日は</p><pre>$ git fetch --tags</pre><p>で、タグの情報を取得しました。</p><p>パシャペではpre-releaseというタグにひもづいたコミットを、<br>開発dev環境にアップしてチェックしているそうです。</p><p>dev環境は共用なので、上書きするときは確認！をしっかりします。</p>"|Notation|フェッチ
23|cherry-pick|"（いいところだけを）つまみ食いする."|"<p>最近git用語ばかりですが…笑</p><pre>$ git cherry-pick コミットID</pre><p>で、特定のコミット部分だけ取り入れることができます。</p><p>開発ファイルの、ミスしてしまったコミットと、正しくて残しておきたいコミットがあるときなどに使えます。<br>間違ったからもう一度書き直し！にならないので凄いです！（今回使った箇所では一文でしたが…笑）</p><p>でもcherry-pickって言い回しが可愛いですね。</p>"|Notation|チェリーピック
24|batch|"群れ，束． （一括処理されるデータやプログラムの単位）"|"<p>今までなんだろうと思いつつ流してしまっていた言葉です。</p><p>昨日臨時メンテがあり、「バッチを流す」という風にエンジニアさんが仰っていました。<br>データベースの値を一括で更新や集計したりすることをバッチ処理というそうです。</p><p>昨日は予定よりずっと早い、30分未満でメンテ終了…さすがです！</p>"|Notation|バッチ
25|remote|" 遠隔(の); リモート 「通信回線」を介して中央側の コンピュータシステムに結ばれている場所の形容. "|"<p>gitでリモートとよく言っていましたが…。<br>gitでは、GitHubに上にあるファイルに対して変更の差分を知らせてファイルを更新します。<br>本線を一カ所に定めることで、変更のチェックを最小限にしているのが本当にすごいなぁと思います。</p><p>今日は始めてrebaseを使ってリモートの最新ファイルを取り込む、ということをしましたが、<br>実際に使ってみないとなかなか理解できてないものだなと感じました。。</p>"|Notation|リモート
26|primitive|" 基本; 基本命令; 基本の;サービス利用者とサービス提供者と の間における相互動作の抽象的な表現."|"<p>プリミティブ型（基本のデータ型）という用語で出てきました。</p><p>javascriptでは、変数にはプリミティブ型だけではなく関数もオブジェクトも入るので、値判定のときに、安易にif(a != 0)などとしないように気をつけるよう指摘していただきました。</p><p>入力空文字チェックのときにも、if(inputString != %27%27)では駄目なように、プログラミングでは「無い」ものの扱いには気をつけないといけないなと感じました！</p>"|Notation|プリミティブ
27|strict|"厳しい，厳格な"|"<p>javascriptでは「use strict」としてイディオムのように出てきます。</p><p>厳格なエラーチェックをしつつ実行してくれるので、今までエラーがはかれなかったコードでもエラーだらけになりがちです。</p><p>昨日は、今更ながらJSLint.vimを入れました。<br>「サイ本」と言われているオライリーのjs参考書？の著者の方が作られたエラーチェックのツールだそうで、Good Partsに出てくるものをほぼエラーチェックしてくれる優れものだそうです。</p><p>研修中に書いていたjsファイルに適用するとエラーだらけでびっくりです。</p><p>functionの宣言時には、</p><pre>function () { ... }</pre><p>と、()の前後にスペースが必要など、知らないことがたくさんでした！</p>"|Notation|ストリクト
28|shell|"ユーザが入力したコマンドを解釈して実行するインタプリタ. "|"<p>shell scriptのshellです。</p><p>windowsではExplorerやコマンドプロンプト、MacではFinder、UNIX系OSではbashなどがシェルにあたるそうです。</p><p>私はトレーナーさんの影響でZ Shellを使っています。<br>まだまだ違いを知らずに使っているので、使いこなせるように調べていきたいと思います！</p>"|Notation|シェル
29|reflection|"反射、反映、影響、投影"|"<p>コミュニティのdevelopperで、reflection5というものをやっています。</p><p>各チームの抱えている問題点を持ち寄って、そのソースコードなどを見せながら、<br>別チームのディベロッパーさんに相談することができる機会です。</p><p>次回はパシャペも出るので、色々相談しようと思います！<br>上手く反映できるように頑張らなければです。</p>"|Notation|リフレクション
30|suspend|"《活動などを》 一時停止する; 吊るす."|"<p>作業中に、Vagrantがフリーズしてしまい、再起動できなくなったときに使いました。</p><pre>　　$ vagrant reload     // 再起動<br>　　　→ [default] Attempting graceful shutdown of VM… のまま動かない<br>　　$ vagrant halt     // シャットダウン<br>　　　→ [default] Attempting graceful shutdown of VM… 同じ<br><br>　　$ vagrant suspend     // 一時停止<br>　　　→ [default] Saving VM state and suspending execution…<br>　　$ vagrant halt     // シャットダウン<br>　　　→ [default] Discarding saved state of VM… さっきと違う応答！<br>　　$ vagrant up     // vagrantの起動</pre><p>実行中のvagrantをsuspendで一度停止させてからでないと、コマンドが効かないのかな？と思います。むずかしいです。</p>"|Notation|サスペンド
31|milestone|"物事の進捗を管理するために途中で設ける節目"|"<blockquote> 商品開発やシステム開発など、長期間にわたるプロジェクトなどでいわれることが多い。 各マイルストーンは最終的な到達点に向かうまでの通過点であり、それぞれの時点で達成すべき事柄（達成要件）と、実際の状況を照らし合わせることで進度の調整を行う。 </blockquote><p class=%22tr%22>（引用：kotobank）</p><p>配属してすぐにトレーナーさんにプロジェクト管理について教えていただきました。<br>パシャペでは、「マイルストーン」は、達成したい到達点（マイページに投稿モジュールを設置する、など）を、その下に「タスク」として何を作業するのかという細かい通過点が設けられています。</p><p>マイルストーンは複雑にならないようにきっちり管理しないと、途中で「このタスクが未完了のまま放置されている！」ということになりかねないので、気をつけなければです。</p><p>誰が見ても作業の進捗がわかるように、私も気をつけてタスク管理していきたいと思います。</p>"|Notation|マイルストーン
32|dram|"記憶保持動作が必要な随時読出し書込みメモリー"|"<p>フォーム画面のドラムロールの画像書き出しで、ファイル名をうっかりdrum（太鼓）にしていました…。</p><p>何のドラムか理解せずに使っていましたが、記憶装置のことなんですね。</p>"|Notation|ドラム, ディーラム
33|uglify|"醜くする"|"<p>jsのコードを圧縮するときに、gruntのタスクとして「uglify」が設定されていました。</p><p>node.js研修でも「uglify.js」という圧縮ライブラリを使いました。</p><p>醜くする？ってなに？って思ったのですが、「難読化ってことじゃない？」と言われて納得！<br>javascriptファイルは社外の人も読めてしまうので、コードを少しでも複雑そうに見せるのは大事ですね。（もちろん圧縮もですが…）</p>"|Notation|アグリファイ
34|matter|" 《原義は問題・事柄の意》俗に、人名や役職などの後について、そ れらが管理すべき問題であることを表す。「総理―」「人事―」"|"<p>開発用語というより、プロジェクト用語ですが…</p><p>このタスクは誰担当？？誰に確認するの？というニュアンスで「これはAさんマターですよね」と言うようです。</p><p>他にも「トンマナ」など、知らない用語が毎日たくさんでてきます…！<br>（トンマナは、トーン＆マナーで、全体の雰囲気などのことをいうそうです！）</p>"|Notation|マター
35|hack|" 《プログラミングなどに》 取り組む，さっとつくる; 《システムなど に》 不法に侵入する; 《データなどを》 改変する"|"<p>hackというとあんまり聞こえがよくない気がしていましたが、限られた時間の中で作り上げるという意味合いもあったんですね</p><p>よく聞くハッカソンなども、一日程度で作り上げることに楽しさがあるようで、<br>トレーナーさんたちが凄くすきそうだなぁ、エンジニアさんってこういうの本当に好きなんだなぁと思って見ていました。</p><p>バグがないのは大前提、でも短時間で、creativeも最大限に追求する、ディベロッパーとして目指していかなければです！</p>"|Notation|ハック
36|grep|"テキストファイルから文字列を検索するプログラムの名称"|"<blockquote>grepの名の由来は、ラインエディタedのコマンド g/re/p であり、その意味するところは「ファイル全体から (global) 正規表現 (regular expression) に一致する行を表示(print)する」である。</blockquote><p class=%22tr%22> (Wikipediaから引用)</p><p>英単語ではなく名称なのですが、、、</p><p>vimFilerを使っていて、ある文字列を含むファイルを探したいときに、さたけさんに教えてもらって感動したのでメモです。</p><pre>:vimgrep hoge *.scss cw</pre><p>で、文字列「hoge」を含むSCSSファイルを検索してくれます。<br>「**/*.scss」にすると、検索対象を一階層上まで広げてくれます。</p>"|Notation|グレップ
37|authentication|"認証; 確認; エンティティ認証"|"<p>gistをcloneしたときに</p><pre>fatal: Authentication failed</pre><p>というエラーで、gitのリポジトリのクローンはできるのにgistだけできないエラーになりました。</p><p>gitのバージョンやSSHなど色々調べたのですが結局解決せず…<br>どなたか知っている方いないでしょうか。。</p>"|Notation| オーセンチケー ション
38|modulo|" 除算により余りを求める整数演算のこと．ある整数aを整数nで 割ったときの余りを「a mod n」と表す．たとえば，「7 mod 3=1」のように記述 する．"|"<p>myペットページのデザインを組むときに、11枚の画像を升目上に並べる際に除算を使って作りました。<br>今まで「あまり」「ぱーせんと」と呼んでいたので、モジュロなんて名前があるのを知らなかったです。</p><p>ところで、a÷nをするとき、nを「法」と余り（modulo）rは</p><pre>aのnを法とする剰余r</pre><p>というそうです。</p><p>「法とする」っていうと難しそうなんですが、プログラムの最小単位である「モジュール（module）」と語感が似ているのは、nを基盤とする…みたいなところが関係するのかなーと思います。語源って面白いですね。</p>"|Notation|モジュロ
39|margin|"余白、欄外、縁、余裕"|"<p>CSSの基本かつくせ者なmargin。<br>paddingが内側、marginは外側に余白をもつ、というくらいの認識しかないのですが、<br>さたけさん曰く、paddingは効かないときがあるから、基本的にはmarginを使う用にするといいよ、だそうです。</p><p>個人的には　margin: 0 auto;　が一番すきです。</p><p>あんなに使ってるのに、先日つづりを間違えて馬鹿にされました。コミットログが…。</p>"|Notation|マージン
40|utility|" 一般には広範囲にわたって使える実用的なものをいう.コン ピュータでは多数のジョブや,目的に対して適用できる便利なプログラムやルー チンのことをいう"|"<p>自分でコードを書いていると、便利ツールとしてすぐに「util」クラスにメソッドを追加してしまいます。</p><p>utilの範囲というか、どこまでをviewやmodelの中のメソッドで書くべきで、どこからがutilで書くべきなのかがうまく切り分けれていない気がします。</p><p>今日のハッカソンでは時間がない焦りもあって、凄くぐちゃぐちゃなコードを書いてしまいました。<br>日頃から意識づけて切り分けて書く癖をつけないとです。</p><p>ちなみにutilクラスって普通どういった形で書くものなんでしょうか。<br>いつも名前空間を使ってutil.getTime…みたいにしているのですが、合っているのか不安です。</p>"|Notation|ユーティリティ
41|absolute|"絶対の、絶対的な、まったくの"|"<p>CSSで苦手なpositionの設定で使います。</p><p>absoluteとrelativeの使い分けがいまいち理解できていないです。<br>relativeの親要素の中にabsoluteを設定した子要素を置くことが多い気がします。</p><p>研修ではstaticとrelativeをセットで使う、と教わった気がするのですが…もう少し勉強します。</p>"|Notation|アブソリュート
42|acceptance|"受け入れ、承認、採択"|"<p>システム開発ではacceptance test（受け入れテスト）として使われるそうです。</p><blockquote>最終段階のテストであり、ユーザが業務などで実際に使用するデータや操作方法を使って行われる。</blockquote><p>だそうで、パシャペではステージング環境での確認にあたるのかな？と思います。<br>develop環境で確認してstaging環境に移してまた確認して、と初めは面倒だし大変だなと思いましたが、データの不一致のエラーを何度も見たので、とても大切なことだなと思います。</p>"|Notation|アクセプタンス
43|amend|"修正、変更、改修、見直す"|"<p>「git commit --amend　でコミットログ修正できるから使いなさい」<br>と梶原さんに教えて頂きました。<br>誤字が多いのでちゃんと使います！<br>（その前にちゃんと確認もします…！）</p><p>gitのコミットログが汚いと言われてしまったので（誤字も…）、<br>rebaseしてプルリクするようにします。<br>でも怖いのでrebase前にちょっと勉強します。</p>"|Notation|アメンド
44|nbsp|"no-break [non-breaking] space."|"<p>熟語ですが、びっくりしたので。</p><p>空白文字を表す「%26nbsp;」（ちゃんと表示されるでしょうか…）です。<br>ただこれ、半角スペースの意味ではなく、</p><blockquote>英文とかで「ここの空白では改行したくない」という時に使う</blockquote><p>のだそうです。<br>CSSでよく半角英数字が改行されなくて困るバグと反対ですね、こういう意味だったなんて驚きです！</p><p class=%22tr%22>（参考）http://blog.fenrir-inc.com/jp/2011/06/post_51.html</p><p>ちなみにこの記事、position: fixedのandroidのバグを探している時の対処法で目にしました。</p><p>android 4.x系でfixedを使った要素で「画像がぼける」とき、<br>画像以外に何か文字？も書いてあげると直る、のだそうです。<br>応急処置的ですが、これは便利…！</p><p>あとz-indexが二重にかかってもぼけてました。メモ。</p>"|Notation|ノーブレークスペース
45|host|" この言葉の元の意味「主人」のとおり,ハードウェア分野,ソフト ウェア分野を問わず,「上位」,「親」,「主」,「ホスト」の語が対応する"|"<p>普段、チェック環境である、stg-petpic.jpというアドレスに自分のローカル環境を反映させて開発しています。<br>このとき、/etc/hostsファイルに、stg-petpic.jpというアドレスにアクセスしたらローカルサーバを表すIPアドレス127.0.0.1を表示させる、という対応の設定を書いておきます。</p><blockquote>対応を記述することにより、LAN内の各マシンで通信を行うときに、IPアドレスではなくホスト名を使用できるようになる。ホスト名を用いて通信相手を指定した場合、実際にはそれがIPアドレスに変換されてから通信が確立する。</blockquote><p>iphoneなどのチェック端末をローカル環境を立ち上げているPCと同じLANに接続詞、プロキシを設定すると同じページが見る事ができます。すごく便利！</p>"|Notation|ホスト
46|asset|"資産、財産、貴重な存在、情報、利点"|"<p>ディレクトリ構成を考えているときに出てきた単語（assets）です。<br>さたけさんが、jsやcssなど、実行するのに必要なフォルダをassets配下に置こうとしていたので、多分必要不可欠なもの、というニュアンスなのかなと思います。</p><p>階層決めMTGは難しかったです。元々パシャペのコードはconfig.rbが点在していたりminifyされていないapp.min.cssがあったりと、「歴史的負債」が多いので、ますます改修が大掛かりになるようです。</p>"|Notation|アセット
47|phantom|"幽霊、幻、幻想、実態のないもの"|"<p>昨日の振返りをしていて、</p><pre>・PhantomJSは幻のブラウザ<br>・CasperJSはPhantomJSを操作するツール</pre><p>だよと言われました。</p><p>目に見えないけどブラウザとして使えるのがphantom（幻）なので、<br>それを操作できるのはおばけだよねってことで、<br>CasperJSのキャラクターはおばけなんだそうです。</p><p>外国の方は発想がおしゃれです！</p><p>歩さんが作られたBacobone.jsのフレームワークのPhalanxも「指の骨」という意味らしく、Backbone（背骨）で行き届かない細かいところを使えるようにするよ！というニュアンスらしいです。おしゃれ！</p>"|Notation|ファントム
48|forge|"築く、築き上げる、進む"|"<p>石本さんの用意して下さったwebfontを使うために、「fontforge」をインストールしました。</p><p>SVGファイルに書き出した単色の素材をwebfontにするツールだそうです。<br><code>$grunt webfont</code>とたたくだけでwebfontとその設定クラスが書かれた_petpic.scssが生成されました。凄く簡単です！</p><p>fontforgeのインストール時に凄く躓いてしまいました。<br>MacPortsがあったのがだめとか、Permissionがどうとか、結局PATHの設定がむちゃくちゃだったのがいけなかったようです。改めてPATH分からない…。</p>"|Notation|フォージ
49|convex|"凸状の、凸面の"|"<p>新デザインで、ボタンのborderが、下部のみ2pxで上・右・左が1pxという、影のついたようなデザインに変わります。<br>そこでそのクラスを私が設定していたんですが、けんさんがクラス名を「convex」と直して下さいました。</p><p>基本のボタンは</p><pre>.btn { border: solid 1px #000 }</pre><p>で、全部1pxにしておいて</p><p>下部が2pxになるボタンのときだけ.convexというクラスを併用して使うやり方になりました。</p><pre>.btn {<br>  border: solid 1px #000<br>  %26.convex {<br>    border-bottom: solid 2px #000;<br>  }<br>}</pre><p>という感じです。なるほど。。愚直な書き方をしていたので勉強になります。</p>"|Notation|コンベックス
50|indent|"〈物の縁など〉に(のこぎりの歯状の)ぎざぎざを付ける.　"|"<p>インデントって言葉を「凹ませる」というニュアンスだと思っていました。<br>が、indentを入れることで、元々の塊とindentを入れる塊にぎざぎざができる、という意味合いなようです。</p><p>何気なく使っている単語も微妙なニュアンスの違いを知ると面白いです。</p>"|Notation|インデント
51|thumbnail|"簡潔な、要点だけの、親指のつめ"|"<p>コンピュータ用語としては、「親指のつめ」が転じて<br>「親指の爪ほどの大きさのプレビュー用の縮小画像」という意味で使っているようです。</p><p>クラス名ではthumとかいう風に省略されていることが多いのですが、はじめ何の事かさっぱりでした。</p><p>Googleのコーディング規約でも.authorを.atrと略したりしていて、省略形は分かりづらいものがたくさんです。（attributeみたいだなと思ってしまいました）<br>tech reportでも「atrはちょっと…」という風に書かれていたので、Googleを鵜呑みにせず、でも参考にしつつ頑張ります。</p>"|Notation|サムネイル
52|undefined|"はっきりしない、未定義の"|"<p>jsでコードを書くときに、nullやundefinedの扱いには気をつけなさいと言われています。</p>undefinedは未定義の「値」なので、存在しないわけではないそうです。<br>そのためjsでは条件式の際に、<code>if(a == b)</code>と判定してしまうと、右辺bが暗黙的に型変換されてしまうため、思いもしない挙動をすることがあります。<br>基本的に<code>===</code>で条件式を書く事、を使う条件式（ほとんどがそうですが）のときは<code>null</code>や<code>undefined</code>のことを想定して書くこと、を心がけます。</p>"|Notation|アンディファインド
53|solid|"かたいこと、個体状であること"|"<p>フロンテックの改修時に別チームの石本さんが設定された、「.is-solid」というクラス名がずっと引っかかっていました。</p><pre>.is-inline　→ インライン要素にする<br>.is-block　→　ブロック要素にする</pre><p>は分かりやすいのですが</p><pre>.is-solid　→　inline-blockにする</pre><p>というクラス設定で、「なぜsolid？？？」となっていたので調べてみました。</p><p>CGの分野で、「solid model」というものがあり、「立体を面の集合として捉え、さらに面と面の間の状態に関するデータも扱う手法。」だそうです。<br>その「立体を面と捉える」というニュアンスが、「ブロックをインラインと捉える」あたりにかかっているのかなぁ？？と勝手に想像しました。<br>結構使われている単語なのでしょうか。</p>"|Notation|ソリッド
54|align|"…を一直線上に並べる、整列させる"|"<p>vertical-alignで頻繁に使います。<br>パシャペでは「.vm」クラスを適用すると「vertical-align: middle;」が適用され、要素が垂直方向に真ん中になるようになります。</p><p>webfontを使うときに、アイコンのwebfontと見出しの高さを揃えるためによく使っています。</p><p>最近「これを実装するならこのクラス！」というのが分かって来たので、<br>マークアップが速くなってきて嬉しいです。頑張ります。</p><p>イラレでは「整列」で簡単に綺麗に揃うものも、web「font」にすると急に難しくなるのが大変です。CSS奥が深いです。。。</p>"|Notation|アライン
55|blame|"非難する、責任、…について責任がある"|"<p>gitのコマンドで「git blame」というものがあるそうです。<br>まだ使ったことはないのですが、コミットした時間と作業者が見れるそうです。</p><p>blameは「責める」って意味だと思っていたのですが<br>そのコードに責任をもつ、という意味合いのようです。<br>早く一人前に書けるようになりたいです。</p>"|Notation|ブレイム
56|state|"状況、状態、…を示す"|"<p>CSSのワークショップで、谷さんの講演を聞いてきました。</p><p>CSSのクラス名などは、Basem, Layout, Module, State, Themeを意識すると良いそうです。<br>ボタンや要素の今の状態を表すのに、「is-active」「is-pressed」をjsで付加して表現することがあり、そのクラス名は要素の状態・stateが分かるようなクラス名であるべきだそうです。</p><p>パシャペでは、is-activeなどのクラス付加はHasterJSという、歩さん自作フレームワークを使っています。<br>ボタンを押すとis-pressedクラスを付加してくれるので簡単に使えるので凄く便利です。</p><p>そういった「お決まり」な使い方をもっと勉強しなければと思います。</p>"|Notation|ステイト
57|partial|"一部だけのさま、部分的な。"|"<p>サーバサイドではモジュールをpartialと呼んでいるようです。<br>多分全く同じというわけではないようなのですが、うまく言えません。</p><p>私たちは一つのボックスで覆われた、持ち出し可能な部品（たとえば２カラムフィード）をモジュールと呼んでいて、モジュールをサーバさんに渡すと、その中から「繰り返し可能な最小単位」を小さなパーシャルとして、その外枠であるモジュールもまたパーシャルとして、入れ子にして実装していくようです。</p>"|Notation|パーシャル
58|yield|"引き起こす、譲渡する、もたらす、収穫、利益"|"<p>昨日のpartialとセットで出て来た単語です。</p><p>partial化した要素は別ファイルとして管理するそうです。<br>子要素を親要素の「ここ！」に埋め込む、というその場所を「yield」と書いていました。<br>てっきり名詞かと思ったのですが、動詞でした。。yieldとyeildを書き違えそうなので気をつけます。</p><p class=%22tr%22>（参考）http://d.hatena.ne.jp/zecl/20080908/p1</p>"|Notation|イールド
59|column|"柱、(1ページ中の)縦の列[段](｟略｠col.)."|"<p>あれだけカラムカラム言っておいて、columと書いていることを指摘されて初めて気がつきました…恥ずかしい。<br>colは縦割り、rowは横割りでしょ、とさたけさんに言われました。</p><p>colとrowの縦横の覚え方が行列みたいでした。コルとローだそうです。<br>（「行」は横棒があるから横のやつ、「列」は縦棒があるから縦のやつ、みたいなの…）</p>"|Notation|カラム
